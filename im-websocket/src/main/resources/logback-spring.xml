<?xml version="1.0" encoding="UTF-8"?>
<configuration>

	<!-- 文件输出格式 -->
	<property name="PATTERN" value="%d{yyyy-MM-dd HH:mm:ss} %-5level %file:%line - %msg%n" />
	<property name="PATTERN2" value="%-12(%d{yyyy-MM-dd HH:mm:ss.SSS}) |-%-5level [%thread] -| %msg%n" />
	
	<!-- logback.xml加载早于application.properties，如果直接通过${参数key}的形式获取是无法获取到对应参数值的 -->
	<springProperty scope="context" name="app_name" source="spring.application.name"/>
	
	<!-- 文件路径 -->
	<property name="LOG_FILE_PATH" value="${logging.path:-logs/}" />

	<!-- ELK日志收集 -->
    <!-- <appender name="LOGSTASH" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
        <destination>192.168.222.129:5044</destination>
        <encoder charset="UTF-8" class="net.logstash.logback.encoder.LogstashEncoder">
        	<customFields>{"app_name":"log.${app_name}"}
			</customFields>
        </encoder>
    </appender> -->
    
    <!-- 输出到控制台 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
    	<encoder>
			<pattern>${PATTERN}</pattern>
		</encoder>
    </appender>
    
    <!-- 每天产生一个文件 -->
    <appender name="FILE_PATH" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 文件路径 -->
		<file>${LOG_FILE_PATH}/log-all.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 文件名称 -->
			<fileNamePattern>${LOG_FILE_PATH}/log-all-%d{yyyy-MM-dd}.log</fileNamePattern>
			<!-- 文件最大保存历史数量 -->
			<MaxHistory>100</MaxHistory>
		</rollingPolicy>
		<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <!-- 每个日志文件最大100MB -->
            <maxFileSize>100MB</maxFileSize>
        </triggeringPolicy>
		<layout class="ch.qos.logback.classic.PatternLayout">
			<pattern>${PATTERN}</pattern>
		</layout>
	</appender>
		
	<!-- 开发环境 -->
	<springProfile name="dev">
		<!-- 通过 LoggerFactory.getLogger("class") 可以获取到这个logger -->
	    <!-- 由于这个logger自动继承了root的appender，自己这边又引入了相同appender -->
	    <!-- 如果没有设置 additivity="false"，就会导致一条日志在同一个appender输出两次 -->
	    <!-- additivity表示要不要使用root配置的appender进行输出 -->
		<logger name="com.yesido" level="DEBUG" additivity="false">
			<appender-ref ref="CONSOLE"/>
			<!-- <appender-ref ref="LOGSTASH" /> -->
		</logger>
	</springProfile>

	<!-- 测试环境 -->
	<springProfile name="test">
		<logger name="com.yesido" level="DEBUG" additivity="false">
			<appender-ref ref="CONSOLE" />
			<appender-ref ref="FILE_PATH" />
			<!-- <appender-ref ref="LOGSTASH" /> -->
		</logger>
	</springProfile>

	<!-- 生产环境 -->
	<springProfile name="prod">
		<logger name="com.yesido" level="DEBUG" additivity="false">
			<appender-ref ref="CONSOLE" />
			<appender-ref ref="FILE_PATH" />
			<!-- <appender-ref ref="LOGSTASH" /> -->
		</logger>
	</springProfile>
	
	<!-- root配置 -->
	<root level="WARN">
		<appender-ref ref="CONSOLE" />
        <!-- <appender-ref ref="LOGSTASH" /> -->
        <appender-ref ref="FILE_PATH" />
    </root> 
</configuration>